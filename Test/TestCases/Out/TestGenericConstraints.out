program TestGenericConstraints;

{$APPTYPE CONSOLE}

{ AFS December 2007 

  This code compiles, but is not semantically meaningfull.
  It is test cases for the code-formating utility

  Test new generics syntax - code from TridenT
}

uses
  SysUtils,
  Classes;

type
  Couleurs = (Rouge, Noir, Vert);

  IMonInterface = interface
    procedure FaitqqChose;
  end;

  TClasseMonInterface = class(TObject, IMonInterface)
    procedure FaitqqChose;
  end;

  TEnregistrement = record //Record non générique (peut implémenter des interfaces)
  end;

  TGenericEnregistrement<T> = record
    //Record générique, attend un paramètre de type non contraint (de tout type)
    Data: T;
  end;


  TGenericClass<R: record> = class
    //Contrainte record sur une classe, attend un paramètre de type d'un type valeur
    Champ: R;
  end;


  TGenericRecord<C: class> = record
    //Contrainte class sur un enregistrement, attend un paramètre de type du type Classe
    MaClasse: C;
  end;

  TGenericClass2<C: class> = class
    //Contrainte class sur une classe , attend un paramètre de type du type Classe
    Valeur: C;
  end;


  TGenericRecord2<C: TList> = record
    //Contrainte sur une classe ancêtre, attend un paramètre de type du type TList et dévirée
    MaClasse: C;
  end;

  TGenericRecord3<C: class,
constructor> = record //Les contraintes peuvent être couplées.
    MaClasse: C;
  end;


  //TGenericClass2<U:TEnregistrement>=Class; //E2510 Le type TEnregistrementn'est pas une contrainte valide
  //Pas d'héritage pour les record sous .NET. Un record est un type valeur

  //TGenericClass2<U:TGenericClass<R:Record>>=Class // E2003: Identificateur non déclaré : 'R'
  // Nécessite un type fermé.
  TGenericClass3<U: TGenericClass<TEnregistrement>> = class
    //Contrainte sur une classe générique particuliére
    EnregistrementUn: U;
  end;

  TGenericClass4<U: TGenericClass<TEnregistrement>> = class
    EnregistrementUn:    U;
    EnregistrementDeux:  TGenericRecord<TObject>;
    EnregistrementTrois: TGenericRecord<TGenericClass<TEnregistrement>>;
    //E2541 Un tableau statique, une chaîne courte ou un type enregistrement contenant un champ avec ces types ne peut pas être utilisé comme argument de type
    //EnregistrementQuatre: TGenericClass<TGenericRecord<TObject>>;
  end;

  TClassContrainteTypeNu<T, U> = class
    type
    TClassImbriquee<S: U> = class
      Valeur: S;
    end;
  end;


  procedure TClasseMonInterface.FaitqqChose;
  begin
    Writeln('Dans la procédure d''interface FaitqqChose');
  end;

var
  Rec:     TGenericRecord<TObject>;
  ObjIntf: TGenericClass2<IMonInterface>;
  //La contrainte class accepte un type interface !
  Obj2:    TGenericClass2<TObject>;
  Obj3:    TGenericClass2<string>; //La contrainte class accepte le type String
  Obj4:    TGenericClass2<array of integer>;
  //La contrainte class accepte aussi un type tableau...

  Obj5: TGenericClass<TEnregistrement>;
  Obj6: TGenericClass<integer>;
  Obj7: TGenericClass<Couleurs>;

  Parent: TClassContrainteTypeNu<string, integer>;
  Naked:  TObject;

begin
  try
    Rec.MaClasse := TObject.Create;
    //Test
    ObjIntf      := TGenericClass2<IMonInterface>.Create;
    ObjIntf.Valeur := TClasseMonInterface.Create;
    IMonInterface(ObjIntf.Valeur).FaitqqChose;

    Obj2 := TGenericClass2<TObject>.Create;
    Obj2.Valeur := nil;
    Obj2.Valeur := TObject.Create;

    Obj3 := TGenericClass2<string>.Create;
    Obj3.Valeur := 'Toto';

    Parent := TClassContrainteTypeNu<string, integer>.Create;
    //E2515 Le paramètre type 'S' n'est pas compatible avec le type 'Integer'
    Naked  := TClassContrainteTypeNu<string, integer>.TClassImbriquee<string>.Create;
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
  readln;
end.
