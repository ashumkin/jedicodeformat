program TestGenericHeritage;

{$APPTYPE CONSOLE}


{ AFS December 2007 

  This code compiles, but is not semantically meaningfull.
  It is test cases for the code-formating utility

  Test new generics syntax - code from TridenT
}

uses
  SysUtils;

type
  //Classe de base
  TClassDeBase = class
    FData: integer;
  end;

  //Classe générique
  TGenerique<I> = class
    FData: I;
  end;

  //Classe de base dérivée d'un type construit ouvert
  {TClassDeBaseDeriveDeGenerique=Class(TGenerique<I>) //E2003 Identificateur non déclaré : 'I'
   FData: integer;
  End;
  }
  //Classe de base dérivée d'un type construit fermé
  TClassDeBaseDeriveDeGenerique = class(TGenerique<integer>)
    FData: integer;
  end;

  //Classe générique dérivée d'une classe de base
  TGeneriqueDeriveeDeClass<I> = class(TClassDeBase)
    FData: I;
  end;

  //Classe générique dérivée d'une classe générique
  TGeneriqueDeriveeDeGenerique<I,S> = class(TGeneriqueDeriveeDeClass<I>)
    FData: I;
    Fitem: S;
  end;

  //Classe générique contrainte
  TGeneriqueContraint<I:
constructor> = class
    FData: I;
  end;

  //Classe générique dérivée d'une classe générique contrainte
  //Dans ce cas les contraintes doivent être redéclarées.
  TGeneriqueDeriveeDeGeneriqueContraint<I:
constructor,S> = class(TGeneriqueContraint<I>)
    FData: I;
    Fitem: S;
  end;


  TParent<T> = class
    X: T;
  end;

  TEnfant<S> = class(TParent<S>)
    //Y: T;  // Erreur! Identifieur inconnu "T"
    Y: S;
  end;


var
  F: TParent<integer>;
begin
  try
    F   := TParent<integer>.Create;
    F.X := 10;  // Erreur! Identifieur inconnu "T"
  except
    on E: Exception do
      Writeln(E.ClassName, ': ', E.Message);
  end;
end.
