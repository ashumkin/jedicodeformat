unit testtypedefs;

interface

uses Classes;

type
  tfred = integer;

  tjim1 = record
    i1: integer;
    s1: string;
  end;
  tbob     = interface;
  tbobdisp = dispinterface;
  tmark    = class;
  ptgarf   = ^tgarf;

  tgarf = record
    ifoo: integer;
    bbar: boolean;
    sbaz: string;
  end;
  tmyenum    = (foo, bar, baz, spon, wibble, fish);
  tmyenumset = set of tmyenum;

  imyiterator = interface(IUnknown)
    procedure First;
    procedure Next;
  end;

  ientryjournallookupdisp = dispinterface
    ['{D34D4103-FBC4-11D2-94F3-00A0CC39B56F}']
    property startdate: tdatetime dispid 1;
    property enddate: tdatetime dispid 2;
    property maxrows: integer dispid 2000;
    property iterator: imyiterator ReadOnly dispid 2001;
    function Execute: imyiterator; dispid 2002;
    function getnewojectkey: IUnknown; dispid 2003;
  end;

  ientryjournaliterator = interface(imyiterator)
    ['{D34D4105-FBC4-11D2-94F3-00A0CC39B56F}']
    function get_note: WideString; safecall;
    function get_status: WideString; safecall;
    function get_createddate: tdatetime; safecall;
    function get_loginname: WideString; safecall;
    function get_id: integer; safecall;
    procedure set_id(id: integer); safecall;
    property note: WideString Read get_note;
    property status: WideString Read get_status;
    property createddate: tdatetime Read get_createddate;
    property loginname: WideString Read get_loginname;
    property id: integer Read get_id Write set_id;
  end;

  fredcoclass = class
    function dink: boolean;
    class
    function Create: IDispatch;
    class function createremote(const machinename: string): IDispatch;
  end;

  otherfredcoclass = class
    class function dink: boolean;
  end;

  tmark = class(TObject)
  private
    fimark: integer;
  protected
    psstuff: string;
  public
    procedure fred; safecall;
    property mark: integer Read fimark Write fimark;
  end;

  tbob = interface(IUnknown)
  end;

  tbobdisp = dispinterface
    ['{BAADBEEF-CADA-11D2-94F3-00A0CC39B56F}']
  end;

  tdink = class(TStrings)
  end;

implementation

function fredcoclass.dink: boolean;
begin
  Result := True;
end;

class function fredcoclass.Create: IDispatch;
begin
  Result := nil;
end;

class function fredcoclass.createremote(const machinename: string): IDispatch;
begin
  Result := nil;
end;

procedure tmark.fred;
begin
end;

class function otherfredcoclass.dink: boolean;
begin
  Result := False;
end;

end.
 