unit TestAddBeginEnd;

interface

implementation

procedure TestIf;
var
  Str1:  string;
  bFoo:  boolean;
  iFish: integer;
begin
  if bFoo then
    Str1 := '';

  if bFoo then
  begin
    Str1 := '';
  end;

  if bFoo then
    Str1 := 'troo'
  else
    Str1 := 'fals';

  if bFoo then
  begin
    Str1 := 'troo';
  end
  else
    Str1 := 'fals';

  if bFoo then
  begin
    Str1 := 'troo';
  end
  else
  begin
    Str1 := 'fals';
  end;

  if bFoo then
    Str1 := 'troo'
  else
  begin
    Str1 := 'fals';
  end;
end;

procedure TestCases;
var
  Str1:  string;
  bFoo:  boolean;
  iFish: integer;
begin

  case iFish of
    1:
      bFoo := true;
    2:
    begin
      bFoo := false;
    end;
    else
      bFoo := false;
  end;


  case iFish of
    1:
      bFoo := true;
    else
    begin
      bFoo := false;
    end
  end;

  case iFish of
    1:
      bFoo := true;
    else
      bFoo := false;
      Str1 := 'troo';
  end;

end;

procedure TestLoop;
var
  lbTest: boolean;
  sFoo:   string;
  liLoop: integer;
begin
  while lbTest do
    lbTest := not lbTest;

  for liLoop := 0 to 10 do
    sFoo := sFoo + '-';
end;

end.
 