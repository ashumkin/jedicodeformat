unit testbogusdirectives;

interface

var
  safecall, dispid: integer;
  cdecl, protected: boolean;

const
  ReadOnly = 10;

type
  Register = class(TObject)
  private
    fidynamic, fipublic: integer;
    function getreadonly: boolean;
  protected
  public
    property dynamic: integer Read fidynamic Write fidynamic;
    property public: integer Read fipublic;
    property ReadOnly: boolean Read getreadonly;
    function dispid: integer; safecall;
    function protected: boolean;
    procedure contains;
    procedure requires;
    procedure package;
    function at: integer;
    function on: integer;
  end;

implementation

label
  dynamic;

procedure override;
var
  virtual: integer;
begin
  virtual := 10;
end;

function register.dispid: integer;
begin
  Result := 12;
end;

function register.
getreadonly: boolean;
var
  Name:     string;
  absolute: integer absolute Name;
begin
  Name   := 'Fred!';
  Result := True;
end;

function register.protected: boolean;
begin
  Result := False;
end;

procedure register.contains;
begin
end;

procedure register.requires;
begin
end;

procedure register.package;
begin
end;

function register.at: integer;
begin
  Result := 23;
end;

function register.on: integer;
begin
  Result := 23;
end;

end.
 