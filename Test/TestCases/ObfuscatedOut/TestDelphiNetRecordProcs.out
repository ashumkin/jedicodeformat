unit testdelphinetrecordprocs;

interface

type
  tsomerecord = record
    i, j, k, l: integer;
    function sum: integer;
    procedure Clear;
    constructor Create(ivalue: integer);
  end;

  toprecord = record
    i: integer;
    s: string;
    class operator add(a, b: toprecord): toprecord;
    class operator
      equal(a, b: toprecord): boolean;
    class operator implicit(a: toprecord): integer;
    class operator
      implicit(a: integer): toprecord;
  end;
  tpropertyrecord = record
  private
    fi, fj: integer;
    function gettwicei: integer;
    function gettwicej: integer;
    procedure settwicei(const Value: integer);
  public
    property i: integer Read fi Write fi;
    property twicei: integer Read gettwicei Write settwicei;
    property twicej: integer Read gettwicej;
  end;

implementation

procedure tsomerecord.Clear;
begin
  i := 0;
  j := 0;
  k := 0;
  l := 0;
end;

constructor tsomerecord.Create(ivalue: integer);
begin
  Clear;
  i := ivalue;
end;

function tsomerecord.sum: integer;
begin
  Result := i + j + k + l;
end;

class operator toprecord.add(a, b: toprecord): toprecord;
begin
  Result.
    i      := a.i + b.i;
  Result.s := a.s + b.s;
end;

class operator toprecord.equal(a, b: toprecord): boolean;
begin
  Result := (a.i = b.i) and (a.s = b.s);
end;

class operator toprecord.implicit(a: integer): toprecord;
begin
  Result.i := a;
  Result.s := '';
end;

class operator toprecord.implicit(a: toprecord): integer;
begin
  Result := a.i;
end;

function tpropertyrecord.gettwicei: integer;
begin
  Result := fi * 2;
end;

function tpropertyrecord.gettwicej: integer;
begin
  Result :=
    fj * 2;
end;

procedure tpropertyrecord.settwicei(const Value: integer);
begin
  fi := Value div 2;
end;

end.
 